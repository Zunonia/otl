#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def authenticate(self, username, password, user_ip):
    pass

  def register(self, user_reg):
    pass

  def backdoor_confirm(self, session_key, username):
    pass

  def confirm(self, username_to_confirm, activation_code):
    pass

  def is_registered(self, username):
    pass

  def is_registered_nickname(self, nickname):
    pass

  def is_registered_email(self, email):
    pass

  def get_info(self, session_key):
    pass

  def modify_password(self, session_key, user_password_info):
    pass

  def modify(self, session_key, user_modification_info):
    pass

  def modify_authentication_email(self, username, new_email):
    pass

  def query_by_username(self, session_key, username):
    pass

  def query_by_nick(self, session_key, username):
    pass

  def remove_user(self, session_key):
    pass

  def search_user(self, session_key, search_user, search_key):
    pass

  def is_sysop(self, session_key):
    pass

  def _logout_process(self, username):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def authenticate(self, username, password, user_ip):
    self.send_authenticate(username, password, user_ip)
    return self.recv_authenticate()

  def send_authenticate(self, username, password, user_ip):
    self._oprot.writeMessageBegin('authenticate', TMessageType.CALL, self._seqid)
    args = authenticate_args()
    args.username = username
    args.password = password
    args.user_ip = user_ip
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_authenticate(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = authenticate_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "authenticate failed: unknown result");

  def register(self, user_reg):
    self.send_register(user_reg)
    self.recv_register()

  def send_register(self, user_reg):
    self._oprot.writeMessageBegin('register', TMessageType.CALL, self._seqid)
    args = register_args()
    args.user_reg = user_reg
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_register(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = register_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def backdoor_confirm(self, session_key, username):
    self.send_backdoor_confirm(session_key, username)
    self.recv_backdoor_confirm()

  def send_backdoor_confirm(self, session_key, username):
    self._oprot.writeMessageBegin('backdoor_confirm', TMessageType.CALL, self._seqid)
    args = backdoor_confirm_args()
    args.session_key = session_key
    args.username = username
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_backdoor_confirm(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = backdoor_confirm_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def confirm(self, username_to_confirm, activation_code):
    self.send_confirm(username_to_confirm, activation_code)
    self.recv_confirm()

  def send_confirm(self, username_to_confirm, activation_code):
    self._oprot.writeMessageBegin('confirm', TMessageType.CALL, self._seqid)
    args = confirm_args()
    args.username_to_confirm = username_to_confirm
    args.activation_code = activation_code
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_confirm(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = confirm_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def is_registered(self, username):
    self.send_is_registered(username)
    return self.recv_is_registered()

  def send_is_registered(self, username):
    self._oprot.writeMessageBegin('is_registered', TMessageType.CALL, self._seqid)
    args = is_registered_args()
    args.username = username
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_is_registered(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = is_registered_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "is_registered failed: unknown result");

  def is_registered_nickname(self, nickname):
    self.send_is_registered_nickname(nickname)
    return self.recv_is_registered_nickname()

  def send_is_registered_nickname(self, nickname):
    self._oprot.writeMessageBegin('is_registered_nickname', TMessageType.CALL, self._seqid)
    args = is_registered_nickname_args()
    args.nickname = nickname
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_is_registered_nickname(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = is_registered_nickname_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "is_registered_nickname failed: unknown result");

  def is_registered_email(self, email):
    self.send_is_registered_email(email)
    return self.recv_is_registered_email()

  def send_is_registered_email(self, email):
    self._oprot.writeMessageBegin('is_registered_email', TMessageType.CALL, self._seqid)
    args = is_registered_email_args()
    args.email = email
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_is_registered_email(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = is_registered_email_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "is_registered_email failed: unknown result");

  def get_info(self, session_key):
    self.send_get_info(session_key)
    return self.recv_get_info()

  def send_get_info(self, session_key):
    self._oprot.writeMessageBegin('get_info', TMessageType.CALL, self._seqid)
    args = get_info_args()
    args.session_key = session_key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_info(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_info_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_info failed: unknown result");

  def modify_password(self, session_key, user_password_info):
    self.send_modify_password(session_key, user_password_info)
    self.recv_modify_password()

  def send_modify_password(self, session_key, user_password_info):
    self._oprot.writeMessageBegin('modify_password', TMessageType.CALL, self._seqid)
    args = modify_password_args()
    args.session_key = session_key
    args.user_password_info = user_password_info
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_modify_password(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = modify_password_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def modify(self, session_key, user_modification_info):
    self.send_modify(session_key, user_modification_info)
    self.recv_modify()

  def send_modify(self, session_key, user_modification_info):
    self._oprot.writeMessageBegin('modify', TMessageType.CALL, self._seqid)
    args = modify_args()
    args.session_key = session_key
    args.user_modification_info = user_modification_info
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_modify(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = modify_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def modify_authentication_email(self, username, new_email):
    self.send_modify_authentication_email(username, new_email)
    self.recv_modify_authentication_email()

  def send_modify_authentication_email(self, username, new_email):
    self._oprot.writeMessageBegin('modify_authentication_email', TMessageType.CALL, self._seqid)
    args = modify_authentication_email_args()
    args.username = username
    args.new_email = new_email
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_modify_authentication_email(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = modify_authentication_email_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ouch != None:
      raise result.ouch
    if result.invalid != None:
      raise result.invalid
    return

  def query_by_username(self, session_key, username):
    self.send_query_by_username(session_key, username)
    return self.recv_query_by_username()

  def send_query_by_username(self, session_key, username):
    self._oprot.writeMessageBegin('query_by_username', TMessageType.CALL, self._seqid)
    args = query_by_username_args()
    args.session_key = session_key
    args.username = username
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_query_by_username(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = query_by_username_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "query_by_username failed: unknown result");

  def query_by_nick(self, session_key, username):
    self.send_query_by_nick(session_key, username)
    return self.recv_query_by_nick()

  def send_query_by_nick(self, session_key, username):
    self._oprot.writeMessageBegin('query_by_nick', TMessageType.CALL, self._seqid)
    args = query_by_nick_args()
    args.session_key = session_key
    args.username = username
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_query_by_nick(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = query_by_nick_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "query_by_nick failed: unknown result");

  def remove_user(self, session_key):
    self.send_remove_user(session_key)
    self.recv_remove_user()

  def send_remove_user(self, session_key):
    self._oprot.writeMessageBegin('remove_user', TMessageType.CALL, self._seqid)
    args = remove_user_args()
    args.session_key = session_key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_remove_user(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = remove_user_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def search_user(self, session_key, search_user, search_key):
    self.send_search_user(session_key, search_user, search_key)
    return self.recv_search_user()

  def send_search_user(self, session_key, search_user, search_key):
    self._oprot.writeMessageBegin('search_user', TMessageType.CALL, self._seqid)
    args = search_user_args()
    args.session_key = session_key
    args.search_user = search_user
    args.search_key = search_key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_search_user(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = search_user_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "search_user failed: unknown result");

  def is_sysop(self, session_key):
    self.send_is_sysop(session_key)
    return self.recv_is_sysop()

  def send_is_sysop(self, session_key):
    self._oprot.writeMessageBegin('is_sysop', TMessageType.CALL, self._seqid)
    args = is_sysop_args()
    args.session_key = session_key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_is_sysop(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = is_sysop_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "is_sysop failed: unknown result");

  def _logout_process(self, username):
    self.send__logout_process(username)
    self.recv__logout_process()

  def send__logout_process(self, username):
    self._oprot.writeMessageBegin('_logout_process', TMessageType.CALL, self._seqid)
    args = _logout_process_args()
    args.username = username
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv__logout_process(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = _logout_process_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["authenticate"] = Processor.process_authenticate
    self._processMap["register"] = Processor.process_register
    self._processMap["backdoor_confirm"] = Processor.process_backdoor_confirm
    self._processMap["confirm"] = Processor.process_confirm
    self._processMap["is_registered"] = Processor.process_is_registered
    self._processMap["is_registered_nickname"] = Processor.process_is_registered_nickname
    self._processMap["is_registered_email"] = Processor.process_is_registered_email
    self._processMap["get_info"] = Processor.process_get_info
    self._processMap["modify_password"] = Processor.process_modify_password
    self._processMap["modify"] = Processor.process_modify
    self._processMap["modify_authentication_email"] = Processor.process_modify_authentication_email
    self._processMap["query_by_username"] = Processor.process_query_by_username
    self._processMap["query_by_nick"] = Processor.process_query_by_nick
    self._processMap["remove_user"] = Processor.process_remove_user
    self._processMap["search_user"] = Processor.process_search_user
    self._processMap["is_sysop"] = Processor.process_is_sysop
    self._processMap["_logout_process"] = Processor.process__logout_process

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_authenticate(self, seqid, iprot, oprot):
    args = authenticate_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = authenticate_result()
    try:
      result.success = self._handler.authenticate(args.username, args.password, args.user_ip)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("authenticate", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_register(self, seqid, iprot, oprot):
    args = register_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = register_result()
    try:
      self._handler.register(args.user_reg)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("register", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_backdoor_confirm(self, seqid, iprot, oprot):
    args = backdoor_confirm_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = backdoor_confirm_result()
    try:
      self._handler.backdoor_confirm(args.session_key, args.username)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("backdoor_confirm", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_confirm(self, seqid, iprot, oprot):
    args = confirm_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = confirm_result()
    try:
      self._handler.confirm(args.username_to_confirm, args.activation_code)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("confirm", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_is_registered(self, seqid, iprot, oprot):
    args = is_registered_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = is_registered_result()
    try:
      result.success = self._handler.is_registered(args.username)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("is_registered", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_is_registered_nickname(self, seqid, iprot, oprot):
    args = is_registered_nickname_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = is_registered_nickname_result()
    try:
      result.success = self._handler.is_registered_nickname(args.nickname)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("is_registered_nickname", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_is_registered_email(self, seqid, iprot, oprot):
    args = is_registered_email_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = is_registered_email_result()
    try:
      result.success = self._handler.is_registered_email(args.email)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("is_registered_email", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_info(self, seqid, iprot, oprot):
    args = get_info_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_info_result()
    try:
      result.success = self._handler.get_info(args.session_key)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("get_info", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_modify_password(self, seqid, iprot, oprot):
    args = modify_password_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = modify_password_result()
    try:
      self._handler.modify_password(args.session_key, args.user_password_info)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("modify_password", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_modify(self, seqid, iprot, oprot):
    args = modify_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = modify_result()
    try:
      self._handler.modify(args.session_key, args.user_modification_info)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("modify", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_modify_authentication_email(self, seqid, iprot, oprot):
    args = modify_authentication_email_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = modify_authentication_email_result()
    try:
      self._handler.modify_authentication_email(args.username, args.new_email)
    except InternalError, ouch:
      result.ouch = ouch
    except InvalidOperation, invalid:
      result.invalid = invalid
    oprot.writeMessageBegin("modify_authentication_email", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_query_by_username(self, seqid, iprot, oprot):
    args = query_by_username_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = query_by_username_result()
    try:
      result.success = self._handler.query_by_username(args.session_key, args.username)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("query_by_username", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_query_by_nick(self, seqid, iprot, oprot):
    args = query_by_nick_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = query_by_nick_result()
    try:
      result.success = self._handler.query_by_nick(args.session_key, args.username)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("query_by_nick", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_remove_user(self, seqid, iprot, oprot):
    args = remove_user_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = remove_user_result()
    try:
      self._handler.remove_user(args.session_key)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("remove_user", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_search_user(self, seqid, iprot, oprot):
    args = search_user_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = search_user_result()
    try:
      result.success = self._handler.search_user(args.session_key, args.search_user, args.search_key)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("search_user", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_is_sysop(self, seqid, iprot, oprot):
    args = is_sysop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = is_sysop_result()
    try:
      result.success = self._handler.is_sysop(args.session_key)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("is_sysop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process__logout_process(self, seqid, iprot, oprot):
    args = _logout_process_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = _logout_process_result()
    try:
      self._handler._logout_process(args.username)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("_logout_process", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class authenticate_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
    (3, TType.STRING, 'user_ip', None, None, ), # 3
  )

  def __init__(self, username=None, password=None, user_ip=None,):
    self.username = username
    self.password = password
    self.user_ip = user_ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.user_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('authenticate_args')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.user_ip != None:
      oprot.writeFieldBegin('user_ip', TType.STRING, 3)
      oprot.writeString(self.user_ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class authenticate_result(object):

  thrift_spec = (
    (0, TType.STRUCT, 'success', (AuthenticationInfo, AuthenticationInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = AuthenticationInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('authenticate_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class register_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'user_reg', (UserRegistration, UserRegistration.thrift_spec), None, ), # 1
  )

  def __init__(self, user_reg=None,):
    self.user_reg = user_reg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.user_reg = UserRegistration()
          self.user_reg.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('register_args')
    if self.user_reg != None:
      oprot.writeFieldBegin('user_reg', TType.STRUCT, 1)
      self.user_reg.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class register_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('register_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class backdoor_confirm_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRING, 'username', None, None, ), # 2
  )

  def __init__(self, session_key=None, username=None,):
    self.session_key = session_key
    self.username = username

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('backdoor_confirm_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 2)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class backdoor_confirm_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('backdoor_confirm_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class confirm_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username_to_confirm', None, None, ), # 1
    (2, TType.STRING, 'activation_code', None, None, ), # 2
  )

  def __init__(self, username_to_confirm=None, activation_code=None,):
    self.username_to_confirm = username_to_confirm
    self.activation_code = activation_code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username_to_confirm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.activation_code = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('confirm_args')
    if self.username_to_confirm != None:
      oprot.writeFieldBegin('username_to_confirm', TType.STRING, 1)
      oprot.writeString(self.username_to_confirm)
      oprot.writeFieldEnd()
    if self.activation_code != None:
      oprot.writeFieldBegin('activation_code', TType.STRING, 2)
      oprot.writeString(self.activation_code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class confirm_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('confirm_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class is_registered_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
  )

  def __init__(self, username=None,):
    self.username = username

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('is_registered_args')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class is_registered_result(object):

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('is_registered_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class is_registered_nickname_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nickname', None, None, ), # 1
  )

  def __init__(self, nickname=None,):
    self.nickname = nickname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('is_registered_nickname_args')
    if self.nickname != None:
      oprot.writeFieldBegin('nickname', TType.STRING, 1)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class is_registered_nickname_result(object):

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('is_registered_nickname_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class is_registered_email_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'email', None, None, ), # 1
  )

  def __init__(self, email=None,):
    self.email = email

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('is_registered_email_args')
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 1)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class is_registered_email_result(object):

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('is_registered_email_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_info_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
  )

  def __init__(self, session_key=None,):
    self.session_key = session_key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_info_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_info_result(object):

  thrift_spec = (
    (0, TType.STRUCT, 'success', (UserInformation, UserInformation.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = UserInformation()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_info_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modify_password_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRUCT, 'user_password_info', (UserPasswordInfo, UserPasswordInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, session_key=None, user_password_info=None,):
    self.session_key = session_key
    self.user_password_info = user_password_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.user_password_info = UserPasswordInfo()
          self.user_password_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modify_password_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.user_password_info != None:
      oprot.writeFieldBegin('user_password_info', TType.STRUCT, 2)
      self.user_password_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modify_password_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modify_password_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modify_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRUCT, 'user_modification_info', (UserModification, UserModification.thrift_spec), None, ), # 2
  )

  def __init__(self, session_key=None, user_modification_info=None,):
    self.session_key = session_key
    self.user_modification_info = user_modification_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.user_modification_info = UserModification()
          self.user_modification_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modify_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.user_modification_info != None:
      oprot.writeFieldBegin('user_modification_info', TType.STRUCT, 2)
      self.user_modification_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modify_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modify_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modify_authentication_email_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'new_email', None, None, ), # 2
  )

  def __init__(self, username=None, new_email=None,):
    self.username = username
    self.new_email = new_email

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.new_email = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modify_authentication_email_args')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.new_email != None:
      oprot.writeFieldBegin('new_email', TType.STRING, 2)
      oprot.writeString(self.new_email)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modify_authentication_email_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 2
  )

  def __init__(self, ouch=None, invalid=None,):
    self.ouch = ouch
    self.invalid = invalid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modify_authentication_email_result')
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 2)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class query_by_username_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRING, 'username', None, None, ), # 2
  )

  def __init__(self, session_key=None, username=None,):
    self.session_key = session_key
    self.username = username

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query_by_username_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 2)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class query_by_username_result(object):

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PublicUserInformation, PublicUserInformation.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PublicUserInformation()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query_by_username_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class query_by_nick_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRING, 'username', None, None, ), # 2
  )

  def __init__(self, session_key=None, username=None,):
    self.session_key = session_key
    self.username = username

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query_by_nick_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 2)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class query_by_nick_result(object):

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PublicUserInformation, PublicUserInformation.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PublicUserInformation()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query_by_nick_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class remove_user_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
  )

  def __init__(self, session_key=None,):
    self.session_key = session_key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('remove_user_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class remove_user_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('remove_user_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class search_user_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRING, 'search_user', None, None, ), # 2
    (3, TType.STRING, 'search_key', None, '', ), # 3
  )

  def __init__(self, session_key=None, search_user=None, search_key=thrift_spec[3][4],):
    self.session_key = session_key
    self.search_user = search_user
    self.search_key = search_key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.search_user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.search_key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('search_user_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.search_user != None:
      oprot.writeFieldBegin('search_user', TType.STRING, 2)
      oprot.writeString(self.search_user)
      oprot.writeFieldEnd()
    if self.search_key != None:
      oprot.writeFieldBegin('search_key', TType.STRING, 3)
      oprot.writeString(self.search_key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class search_user_result(object):

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(SearchUserResult, SearchUserResult.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = SearchUserResult()
            _elem47.read(iprot)
            self.success.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('search_user_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter48 in self.success:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class is_sysop_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
  )

  def __init__(self, session_key=None,):
    self.session_key = session_key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('is_sysop_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class is_sysop_result(object):

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('is_sysop_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class _logout_process_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
  )

  def __init__(self, username=None,):
    self.username = username

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('_logout_process_args')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class _logout_process_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('_logout_process_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


