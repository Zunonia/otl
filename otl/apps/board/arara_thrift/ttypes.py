#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class InternalError(Exception):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'why', None, None, ), # 1
  )

  def __init__(self, why=None,):
    self.why = why

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.why = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InternalError')
    if self.why != None:
      oprot.writeFieldBegin('why', TType.STRING, 1)
      oprot.writeString(self.why)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidOperation(Exception):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'why', None, None, ), # 1
  )

  def __init__(self, why=None,):
    self.why = why

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.why = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidOperation')
    if self.why != None:
      oprot.writeFieldBegin('why', TType.STRING, 1)
      oprot.writeString(self.why)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotLoggedIn(Exception):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotLoggedIn')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VisitorCount(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total_visitor_count', None, None, ), # 1
    (2, TType.I32, 'today_visitor_count', None, None, ), # 2
  )

  def __init__(self, total_visitor_count=None, today_visitor_count=None,):
    self.total_visitor_count = total_visitor_count
    self.today_visitor_count = today_visitor_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total_visitor_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.today_visitor_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VisitorCount')
    if self.total_visitor_count != None:
      oprot.writeFieldBegin('total_visitor_count', TType.I32, 1)
      oprot.writeI32(self.total_visitor_count)
      oprot.writeFieldEnd()
    if self.today_visitor_count != None:
      oprot.writeFieldBegin('today_visitor_count', TType.I32, 2)
      oprot.writeI32(self.today_visitor_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Session(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'ip', None, None, ), # 2
    (3, TType.STRING, 'current_action', None, None, ), # 3
    (4, TType.STRING, 'nickname', None, None, ), # 4
    (5, TType.DOUBLE, 'logintime', None, None, ), # 5
  )

  def __init__(self, username=None, ip=None, current_action=None, nickname=None, logintime=None,):
    self.username = username
    self.ip = ip
    self.current_action = current_action
    self.nickname = nickname
    self.logintime = logintime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.current_action = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.logintime = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Session')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.ip != None:
      oprot.writeFieldBegin('ip', TType.STRING, 2)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.current_action != None:
      oprot.writeFieldBegin('current_action', TType.STRING, 3)
      oprot.writeString(self.current_action)
      oprot.writeFieldEnd()
    if self.nickname != None:
      oprot.writeFieldBegin('nickname', TType.STRING, 4)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.logintime != None:
      oprot.writeFieldBegin('logintime', TType.DOUBLE, 5)
      oprot.writeDouble(self.logintime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthenticationInfo(object):

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'last_login_time', None, None, ), # 1
    (2, TType.STRING, 'nickname', None, None, ), # 2
  )

  def __init__(self, last_login_time=None, nickname=None,):
    self.last_login_time = last_login_time
    self.nickname = nickname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.last_login_time = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthenticationInfo')
    if self.last_login_time != None:
      oprot.writeFieldBegin('last_login_time', TType.DOUBLE, 1)
      oprot.writeDouble(self.last_login_time)
      oprot.writeFieldEnd()
    if self.nickname != None:
      oprot.writeFieldBegin('nickname', TType.STRING, 2)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserRegistration(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
    (3, TType.STRING, 'nickname', None, None, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.STRING, 'signature', None, None, ), # 5
    (6, TType.STRING, 'self_introduction', None, None, ), # 6
    (7, TType.STRING, 'default_language', None, None, ), # 7
  )

  def __init__(self, username=None, password=None, nickname=None, email=None, signature=None, self_introduction=None, default_language=None,):
    self.username = username
    self.password = password
    self.nickname = nickname
    self.email = email
    self.signature = signature
    self.self_introduction = self_introduction
    self.default_language = default_language

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.signature = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.self_introduction = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.default_language = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserRegistration')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.nickname != None:
      oprot.writeFieldBegin('nickname', TType.STRING, 3)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.signature != None:
      oprot.writeFieldBegin('signature', TType.STRING, 5)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    if self.self_introduction != None:
      oprot.writeFieldBegin('self_introduction', TType.STRING, 6)
      oprot.writeString(self.self_introduction)
      oprot.writeFieldEnd()
    if self.default_language != None:
      oprot.writeFieldBegin('default_language', TType.STRING, 7)
      oprot.writeString(self.default_language)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInformation(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'nickname', None, None, ), # 2
    (3, TType.STRING, 'email', None, None, ), # 3
    (4, TType.STRING, 'last_login_ip', None, None, ), # 4
    (5, TType.DOUBLE, 'last_logout_time', None, None, ), # 5
    (6, TType.STRING, 'signature', None, None, ), # 6
    (7, TType.STRING, 'self_introduction', None, None, ), # 7
    (8, TType.STRING, 'default_language', None, None, ), # 8
    (9, TType.BOOL, 'activated', None, None, ), # 9
    (10, TType.I32, 'widget', None, None, ), # 10
    (11, TType.I32, 'layout', None, None, ), # 11
  )

  def __init__(self, username=None, nickname=None, email=None, last_login_ip=None, last_logout_time=None, signature=None, self_introduction=None, default_language=None, activated=None, widget=None, layout=None,):
    self.username = username
    self.nickname = nickname
    self.email = email
    self.last_login_ip = last_login_ip
    self.last_logout_time = last_logout_time
    self.signature = signature
    self.self_introduction = self_introduction
    self.default_language = default_language
    self.activated = activated
    self.widget = widget
    self.layout = layout

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.last_login_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.last_logout_time = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.signature = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.self_introduction = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.default_language = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.activated = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.widget = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.layout = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInformation')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.nickname != None:
      oprot.writeFieldBegin('nickname', TType.STRING, 2)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 3)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.last_login_ip != None:
      oprot.writeFieldBegin('last_login_ip', TType.STRING, 4)
      oprot.writeString(self.last_login_ip)
      oprot.writeFieldEnd()
    if self.last_logout_time != None:
      oprot.writeFieldBegin('last_logout_time', TType.DOUBLE, 5)
      oprot.writeDouble(self.last_logout_time)
      oprot.writeFieldEnd()
    if self.signature != None:
      oprot.writeFieldBegin('signature', TType.STRING, 6)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    if self.self_introduction != None:
      oprot.writeFieldBegin('self_introduction', TType.STRING, 7)
      oprot.writeString(self.self_introduction)
      oprot.writeFieldEnd()
    if self.default_language != None:
      oprot.writeFieldBegin('default_language', TType.STRING, 8)
      oprot.writeString(self.default_language)
      oprot.writeFieldEnd()
    if self.activated != None:
      oprot.writeFieldBegin('activated', TType.BOOL, 9)
      oprot.writeBool(self.activated)
      oprot.writeFieldEnd()
    if self.widget != None:
      oprot.writeFieldBegin('widget', TType.I32, 10)
      oprot.writeI32(self.widget)
      oprot.writeFieldEnd()
    if self.layout != None:
      oprot.writeFieldBegin('layout', TType.I32, 11)
      oprot.writeI32(self.layout)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserPasswordInfo(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'current_password', None, None, ), # 2
    (3, TType.STRING, 'new_password', None, None, ), # 3
  )

  def __init__(self, username=None, current_password=None, new_password=None,):
    self.username = username
    self.current_password = current_password
    self.new_password = new_password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.current_password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.new_password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserPasswordInfo')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.current_password != None:
      oprot.writeFieldBegin('current_password', TType.STRING, 2)
      oprot.writeString(self.current_password)
      oprot.writeFieldEnd()
    if self.new_password != None:
      oprot.writeFieldBegin('new_password', TType.STRING, 3)
      oprot.writeString(self.new_password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserModification(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nickname', None, None, ), # 1
    (2, TType.STRING, 'signature', None, None, ), # 2
    (3, TType.STRING, 'self_introduction', None, None, ), # 3
    (4, TType.STRING, 'default_language', None, None, ), # 4
    (5, TType.I32, 'widget', None, None, ), # 5
    (6, TType.I32, 'layout', None, None, ), # 6
  )

  def __init__(self, nickname=None, signature=None, self_introduction=None, default_language=None, widget=None, layout=None,):
    self.nickname = nickname
    self.signature = signature
    self.self_introduction = self_introduction
    self.default_language = default_language
    self.widget = widget
    self.layout = layout

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.signature = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.self_introduction = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.default_language = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.widget = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.layout = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserModification')
    if self.nickname != None:
      oprot.writeFieldBegin('nickname', TType.STRING, 1)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.signature != None:
      oprot.writeFieldBegin('signature', TType.STRING, 2)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    if self.self_introduction != None:
      oprot.writeFieldBegin('self_introduction', TType.STRING, 3)
      oprot.writeString(self.self_introduction)
      oprot.writeFieldEnd()
    if self.default_language != None:
      oprot.writeFieldBegin('default_language', TType.STRING, 4)
      oprot.writeString(self.default_language)
      oprot.writeFieldEnd()
    if self.widget != None:
      oprot.writeFieldBegin('widget', TType.I32, 5)
      oprot.writeI32(self.widget)
      oprot.writeFieldEnd()
    if self.layout != None:
      oprot.writeFieldBegin('layout', TType.I32, 6)
      oprot.writeI32(self.layout)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PublicUserInformation(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'nickname', None, None, ), # 2
    (3, TType.STRING, 'signature', None, None, ), # 3
    (4, TType.STRING, 'self_introduction', None, None, ), # 4
    (5, TType.STRING, 'last_login_ip', None, None, ), # 5
    (6, TType.DOUBLE, 'last_logout_time', None, None, ), # 6
    (7, TType.STRING, 'email', None, None, ), # 7
  )

  def __init__(self, username=None, nickname=None, signature=None, self_introduction=None, last_login_ip=None, last_logout_time=None, email=None,):
    self.username = username
    self.nickname = nickname
    self.signature = signature
    self.self_introduction = self_introduction
    self.last_login_ip = last_login_ip
    self.last_logout_time = last_logout_time
    self.email = email

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.signature = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.self_introduction = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.last_login_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.last_logout_time = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PublicUserInformation')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.nickname != None:
      oprot.writeFieldBegin('nickname', TType.STRING, 2)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.signature != None:
      oprot.writeFieldBegin('signature', TType.STRING, 3)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    if self.self_introduction != None:
      oprot.writeFieldBegin('self_introduction', TType.STRING, 4)
      oprot.writeString(self.self_introduction)
      oprot.writeFieldEnd()
    if self.last_login_ip != None:
      oprot.writeFieldBegin('last_login_ip', TType.STRING, 5)
      oprot.writeString(self.last_login_ip)
      oprot.writeFieldEnd()
    if self.last_logout_time != None:
      oprot.writeFieldBegin('last_logout_time', TType.DOUBLE, 6)
      oprot.writeDouble(self.last_logout_time)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 7)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchUserResult(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'nickname', None, None, ), # 2
  )

  def __init__(self, username=None, nickname=None,):
    self.username = username
    self.nickname = nickname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchUserResult')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.nickname != None:
      oprot.writeFieldBegin('nickname', TType.STRING, 2)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BlacklistRequest(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'blacklisted_user_username', None, None, ), # 1
    (2, TType.BOOL, 'block_article', None, None, ), # 2
    (3, TType.BOOL, 'block_message', None, None, ), # 3
  )

  def __init__(self, blacklisted_user_username=None, block_article=None, block_message=None,):
    self.blacklisted_user_username = blacklisted_user_username
    self.block_article = block_article
    self.block_message = block_message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.blacklisted_user_username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.block_article = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.block_message = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BlacklistRequest')
    if self.blacklisted_user_username != None:
      oprot.writeFieldBegin('blacklisted_user_username', TType.STRING, 1)
      oprot.writeString(self.blacklisted_user_username)
      oprot.writeFieldEnd()
    if self.block_article != None:
      oprot.writeFieldBegin('block_article', TType.BOOL, 2)
      oprot.writeBool(self.block_article)
      oprot.writeFieldEnd()
    if self.block_message != None:
      oprot.writeFieldBegin('block_message', TType.BOOL, 3)
      oprot.writeBool(self.block_message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BlacklistInformation(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'blacklisted_user_username', None, None, ), # 1
    (2, TType.STRING, 'blacklisted_user_nickname', None, None, ), # 2
    (3, TType.DOUBLE, 'last_modified_date', None, None, ), # 3
    (4, TType.DOUBLE, 'blacklisted_date', None, None, ), # 4
    (5, TType.BOOL, 'block_article', None, None, ), # 5
    (6, TType.BOOL, 'block_message', None, None, ), # 6
    (7, TType.I32, 'id', None, None, ), # 7
  )

  def __init__(self, blacklisted_user_username=None, blacklisted_user_nickname=None, last_modified_date=None, blacklisted_date=None, block_article=None, block_message=None, id=None,):
    self.blacklisted_user_username = blacklisted_user_username
    self.blacklisted_user_nickname = blacklisted_user_nickname
    self.last_modified_date = last_modified_date
    self.blacklisted_date = blacklisted_date
    self.block_article = block_article
    self.block_message = block_message
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.blacklisted_user_username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.blacklisted_user_nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.last_modified_date = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.blacklisted_date = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.block_article = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.block_message = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BlacklistInformation')
    if self.blacklisted_user_username != None:
      oprot.writeFieldBegin('blacklisted_user_username', TType.STRING, 1)
      oprot.writeString(self.blacklisted_user_username)
      oprot.writeFieldEnd()
    if self.blacklisted_user_nickname != None:
      oprot.writeFieldBegin('blacklisted_user_nickname', TType.STRING, 2)
      oprot.writeString(self.blacklisted_user_nickname)
      oprot.writeFieldEnd()
    if self.last_modified_date != None:
      oprot.writeFieldBegin('last_modified_date', TType.DOUBLE, 3)
      oprot.writeDouble(self.last_modified_date)
      oprot.writeFieldEnd()
    if self.blacklisted_date != None:
      oprot.writeFieldBegin('blacklisted_date', TType.DOUBLE, 4)
      oprot.writeDouble(self.blacklisted_date)
      oprot.writeFieldEnd()
    if self.block_article != None:
      oprot.writeFieldBegin('block_article', TType.BOOL, 5)
      oprot.writeBool(self.block_article)
      oprot.writeFieldEnd()
    if self.block_message != None:
      oprot.writeFieldBegin('block_message', TType.BOOL, 6)
      oprot.writeBool(self.block_message)
      oprot.writeFieldEnd()
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 7)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Board(object):

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'read_only', None, None, ), # 1
    (2, TType.STRING, 'board_name', None, None, ), # 2
    (3, TType.STRING, 'board_description', None, None, ), # 3
  )

  def __init__(self, read_only=None, board_name=None, board_description=None,):
    self.read_only = read_only
    self.board_name = board_name
    self.board_description = board_description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.read_only = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.board_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.board_description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Board')
    if self.read_only != None:
      oprot.writeFieldBegin('read_only', TType.BOOL, 1)
      oprot.writeBool(self.read_only)
      oprot.writeFieldEnd()
    if self.board_name != None:
      oprot.writeFieldBegin('board_name', TType.STRING, 2)
      oprot.writeString(self.board_name)
      oprot.writeFieldEnd()
    if self.board_description != None:
      oprot.writeFieldBegin('board_description', TType.STRING, 3)
      oprot.writeString(self.board_description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WrittenArticle(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'title', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
  )

  def __init__(self, title=None, content=None,):
    self.title = title
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WrittenArticle')
    if self.title != None:
      oprot.writeFieldBegin('title', TType.STRING, 1)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AttachDict(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'filename', None, None, ), # 1
    (2, TType.I32, 'file_id', None, None, ), # 2
  )

  def __init__(self, filename=None, file_id=None,):
    self.filename = filename
    self.file_id = file_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.filename = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.file_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AttachDict')
    if self.filename != None:
      oprot.writeFieldBegin('filename', TType.STRING, 1)
      oprot.writeString(self.filename)
      oprot.writeFieldEnd()
    if self.file_id != None:
      oprot.writeFieldBegin('file_id', TType.I32, 2)
      oprot.writeI32(self.file_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Article(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'content', None, None, ), # 3
    (4, TType.DOUBLE, 'date', None, None, ), # 4
    (5, TType.I32, 'hit', None, 0, ), # 5
    (6, TType.I32, 'vote', None, None, ), # 6
    (7, TType.BOOL, 'deleted', None, False, ), # 7
    (8, TType.I32, 'root_id', None, None, ), # 8
    (9, TType.STRING, 'author_username', None, None, ), # 9
    (10, TType.STRING, 'author_nickname', None, None, ), # 10
    (11, TType.BOOL, 'blacklisted', None, False, ), # 11
    (12, TType.BOOL, 'is_searchable', None, True, ), # 12
    (13, TType.DOUBLE, 'last_modified_date', None, None, ), # 13
    (14, TType.I32, 'depth', None, None, ), # 14
    (15, TType.STRING, 'read_status', None, None, ), # 15
    (16, TType.I32, 'reply_count', None, None, ), # 16
    (17, TType.STRING, 'type', None, None, ), # 17
    (18, TType.STRING, 'board_name', None, None, ), # 18
    (19, TType.LIST, 'attach', (TType.STRUCT,(AttachDict, AttachDict.thrift_spec)), None, ), # 19
  )

  def __init__(self, id=None, title=None, content=None, date=None, hit=thrift_spec[5][4], vote=None, deleted=thrift_spec[7][4], root_id=None, author_username=None, author_nickname=None, blacklisted=thrift_spec[11][4], is_searchable=thrift_spec[12][4], last_modified_date=None, depth=None, read_status=None, reply_count=None, type=None, board_name=None, attach=None,):
    self.id = id
    self.title = title
    self.content = content
    self.date = date
    self.hit = hit
    self.vote = vote
    self.deleted = deleted
    self.root_id = root_id
    self.author_username = author_username
    self.author_nickname = author_nickname
    self.blacklisted = blacklisted
    self.is_searchable = is_searchable
    self.last_modified_date = last_modified_date
    self.depth = depth
    self.read_status = read_status
    self.reply_count = reply_count
    self.type = type
    self.board_name = board_name
    self.attach = attach

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.date = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.vote = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.deleted = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.root_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.author_username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.author_nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.blacklisted = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.is_searchable = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.last_modified_date = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.depth = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.read_status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.reply_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.board_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.attach = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = AttachDict()
            _elem5.read(iprot)
            self.attach.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Article')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.title != None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 3)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.date != None:
      oprot.writeFieldBegin('date', TType.DOUBLE, 4)
      oprot.writeDouble(self.date)
      oprot.writeFieldEnd()
    if self.hit != None:
      oprot.writeFieldBegin('hit', TType.I32, 5)
      oprot.writeI32(self.hit)
      oprot.writeFieldEnd()
    if self.vote != None:
      oprot.writeFieldBegin('vote', TType.I32, 6)
      oprot.writeI32(self.vote)
      oprot.writeFieldEnd()
    if self.deleted != None:
      oprot.writeFieldBegin('deleted', TType.BOOL, 7)
      oprot.writeBool(self.deleted)
      oprot.writeFieldEnd()
    if self.root_id != None:
      oprot.writeFieldBegin('root_id', TType.I32, 8)
      oprot.writeI32(self.root_id)
      oprot.writeFieldEnd()
    if self.author_username != None:
      oprot.writeFieldBegin('author_username', TType.STRING, 9)
      oprot.writeString(self.author_username)
      oprot.writeFieldEnd()
    if self.author_nickname != None:
      oprot.writeFieldBegin('author_nickname', TType.STRING, 10)
      oprot.writeString(self.author_nickname)
      oprot.writeFieldEnd()
    if self.blacklisted != None:
      oprot.writeFieldBegin('blacklisted', TType.BOOL, 11)
      oprot.writeBool(self.blacklisted)
      oprot.writeFieldEnd()
    if self.is_searchable != None:
      oprot.writeFieldBegin('is_searchable', TType.BOOL, 12)
      oprot.writeBool(self.is_searchable)
      oprot.writeFieldEnd()
    if self.last_modified_date != None:
      oprot.writeFieldBegin('last_modified_date', TType.DOUBLE, 13)
      oprot.writeDouble(self.last_modified_date)
      oprot.writeFieldEnd()
    if self.depth != None:
      oprot.writeFieldBegin('depth', TType.I32, 14)
      oprot.writeI32(self.depth)
      oprot.writeFieldEnd()
    if self.read_status != None:
      oprot.writeFieldBegin('read_status', TType.STRING, 15)
      oprot.writeString(self.read_status)
      oprot.writeFieldEnd()
    if self.reply_count != None:
      oprot.writeFieldBegin('reply_count', TType.I32, 16)
      oprot.writeI32(self.reply_count)
      oprot.writeFieldEnd()
    if self.type != None:
      oprot.writeFieldBegin('type', TType.STRING, 17)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.board_name != None:
      oprot.writeFieldBegin('board_name', TType.STRING, 18)
      oprot.writeString(self.board_name)
      oprot.writeFieldEnd()
    if self.attach != None:
      oprot.writeFieldBegin('attach', TType.LIST, 19)
      oprot.writeListBegin(TType.STRUCT, len(self.attach))
      for iter6 in self.attach:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ArticleList(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'last_page', None, None, ), # 1
    (2, TType.I32, 'results', None, None, ), # 2
    (3, TType.LIST, 'hit', (TType.STRUCT,(Article, Article.thrift_spec)), None, ), # 3
    (4, TType.I32, 'current_page', None, None, ), # 4
  )

  def __init__(self, last_page=None, results=None, hit=None, current_page=None,):
    self.last_page = last_page
    self.results = results
    self.hit = hit
    self.current_page = current_page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.last_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.results = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.hit = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = Article()
            _elem12.read(iprot)
            self.hit.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.current_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArticleList')
    if self.last_page != None:
      oprot.writeFieldBegin('last_page', TType.I32, 1)
      oprot.writeI32(self.last_page)
      oprot.writeFieldEnd()
    if self.results != None:
      oprot.writeFieldBegin('results', TType.I32, 2)
      oprot.writeI32(self.results)
      oprot.writeFieldEnd()
    if self.hit != None:
      oprot.writeFieldBegin('hit', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.hit))
      for iter13 in self.hit:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.current_page != None:
      oprot.writeFieldBegin('current_page', TType.I32, 4)
      oprot.writeI32(self.current_page)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ArticleNumberList(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'last_page', None, None, ), # 1
    (2, TType.I32, 'results', None, None, ), # 2
    (3, TType.LIST, 'hit', (TType.I32,None), None, ), # 3
  )

  def __init__(self, last_page=None, results=None, hit=None,):
    self.last_page = last_page
    self.results = results
    self.hit = hit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.last_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.results = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.hit = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.hit.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArticleNumberList')
    if self.last_page != None:
      oprot.writeFieldBegin('last_page', TType.I32, 1)
      oprot.writeI32(self.last_page)
      oprot.writeFieldEnd()
    if self.results != None:
      oprot.writeFieldBegin('results', TType.I32, 2)
      oprot.writeI32(self.results)
      oprot.writeFieldEnd()
    if self.hit != None:
      oprot.writeFieldBegin('hit', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.hit))
      for iter20 in self.hit:
        oprot.writeI32(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FileInfo(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'file_path', None, None, ), # 1
    (2, TType.STRING, 'saved_filename', None, None, ), # 2
  )

  def __init__(self, file_path=None, saved_filename=None,):
    self.file_path = file_path
    self.saved_filename = saved_filename

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.file_path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.saved_filename = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FileInfo')
    if self.file_path != None:
      oprot.writeFieldBegin('file_path', TType.STRING, 1)
      oprot.writeString(self.file_path)
      oprot.writeFieldEnd()
    if self.saved_filename != None:
      oprot.writeFieldBegin('saved_filename', TType.STRING, 2)
      oprot.writeString(self.saved_filename)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DownloadFileInfo(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'file_path', None, None, ), # 1
    (2, TType.STRING, 'saved_filename', None, None, ), # 2
    (3, TType.STRING, 'real_filename', None, None, ), # 3
  )

  def __init__(self, file_path=None, saved_filename=None, real_filename=None,):
    self.file_path = file_path
    self.saved_filename = saved_filename
    self.real_filename = real_filename

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.file_path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.saved_filename = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.real_filename = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DownloadFileInfo')
    if self.file_path != None:
      oprot.writeFieldBegin('file_path', TType.STRING, 1)
      oprot.writeString(self.file_path)
      oprot.writeFieldEnd()
    if self.saved_filename != None:
      oprot.writeFieldBegin('saved_filename', TType.STRING, 2)
      oprot.writeString(self.saved_filename)
      oprot.writeFieldEnd()
    if self.real_filename != None:
      oprot.writeFieldBegin('real_filename', TType.STRING, 3)
      oprot.writeString(self.real_filename)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Message(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'from_', None, None, ), # 2
    (3, TType.STRING, 'from_nickname', None, None, ), # 3
    (4, TType.STRING, 'to', None, None, ), # 4
    (5, TType.STRING, 'to_nickname', None, None, ), # 5
    (6, TType.STRING, 'message', None, None, ), # 6
    (7, TType.DOUBLE, 'sent_time', None, None, ), # 7
    (8, TType.STRING, 'read_status', None, None, ), # 8
    (9, TType.BOOL, 'blacklisted', None, False, ), # 9
  )

  def __init__(self, id=None, from_=None, from_nickname=None, to=None, to_nickname=None, message=None, sent_time=None, read_status=None, blacklisted=thrift_spec[9][4],):
    self.id = id
    self.from_ = from_
    self.from_nickname = from_nickname
    self.to = to
    self.to_nickname = to_nickname
    self.message = message
    self.sent_time = sent_time
    self.read_status = read_status
    self.blacklisted = blacklisted

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.from_ = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.from_nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.to = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.to_nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.sent_time = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.read_status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.blacklisted = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Message')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.from_ != None:
      oprot.writeFieldBegin('from_', TType.STRING, 2)
      oprot.writeString(self.from_)
      oprot.writeFieldEnd()
    if self.from_nickname != None:
      oprot.writeFieldBegin('from_nickname', TType.STRING, 3)
      oprot.writeString(self.from_nickname)
      oprot.writeFieldEnd()
    if self.to != None:
      oprot.writeFieldBegin('to', TType.STRING, 4)
      oprot.writeString(self.to)
      oprot.writeFieldEnd()
    if self.to_nickname != None:
      oprot.writeFieldBegin('to_nickname', TType.STRING, 5)
      oprot.writeString(self.to_nickname)
      oprot.writeFieldEnd()
    if self.message != None:
      oprot.writeFieldBegin('message', TType.STRING, 6)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.sent_time != None:
      oprot.writeFieldBegin('sent_time', TType.DOUBLE, 7)
      oprot.writeDouble(self.sent_time)
      oprot.writeFieldEnd()
    if self.read_status != None:
      oprot.writeFieldBegin('read_status', TType.STRING, 8)
      oprot.writeString(self.read_status)
      oprot.writeFieldEnd()
    if self.blacklisted != None:
      oprot.writeFieldBegin('blacklisted', TType.BOOL, 9)
      oprot.writeBool(self.blacklisted)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MessageList(object):

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'hit', (TType.STRUCT,(Message, Message.thrift_spec)), None, ), # 1
    (2, TType.I32, 'last_page', None, None, ), # 2
    (3, TType.I32, 'results', None, None, ), # 3
    (4, TType.I32, 'new_message_count', None, 0, ), # 4
  )

  def __init__(self, hit=None, last_page=None, results=None, new_message_count=thrift_spec[4][4],):
    self.hit = hit
    self.last_page = last_page
    self.results = results
    self.new_message_count = new_message_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.hit = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = Message()
            _elem26.read(iprot)
            self.hit.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.last_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.results = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.new_message_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MessageList')
    if self.hit != None:
      oprot.writeFieldBegin('hit', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.hit))
      for iter27 in self.hit:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.last_page != None:
      oprot.writeFieldBegin('last_page', TType.I32, 2)
      oprot.writeI32(self.last_page)
      oprot.writeFieldEnd()
    if self.results != None:
      oprot.writeFieldBegin('results', TType.I32, 3)
      oprot.writeI32(self.results)
      oprot.writeFieldEnd()
    if self.new_message_count != None:
      oprot.writeFieldBegin('new_message_count', TType.I32, 4)
      oprot.writeI32(self.new_message_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ArticleSearchResult(object):

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'hit', (TType.STRUCT,(Article, Article.thrift_spec)), None, ), # 1
    (2, TType.I32, 'results', None, None, ), # 2
    (3, TType.DOUBLE, 'search_time', None, None, ), # 3
    (4, TType.I32, 'last_page', None, None, ), # 4
  )

  def __init__(self, hit=None, results=None, search_time=None, last_page=None,):
    self.hit = hit
    self.results = results
    self.search_time = search_time
    self.last_page = last_page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.hit = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = Article()
            _elem33.read(iprot)
            self.hit.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.results = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.search_time = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.last_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArticleSearchResult')
    if self.hit != None:
      oprot.writeFieldBegin('hit', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.hit))
      for iter34 in self.hit:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.results != None:
      oprot.writeFieldBegin('results', TType.I32, 2)
      oprot.writeI32(self.results)
      oprot.writeFieldEnd()
    if self.search_time != None:
      oprot.writeFieldBegin('search_time', TType.DOUBLE, 3)
      oprot.writeDouble(self.search_time)
      oprot.writeFieldEnd()
    if self.last_page != None:
      oprot.writeFieldBegin('last_page', TType.I32, 4)
      oprot.writeI32(self.last_page)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchQuery(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'query', None, '', ), # 1
    (2, TType.STRING, 'title', None, '', ), # 2
    (3, TType.STRING, 'content', None, '', ), # 3
    (4, TType.STRING, 'author_nickname', None, '', ), # 4
    (5, TType.STRING, 'author_username', None, '', ), # 5
    (6, TType.STRING, 'date', None, '', ), # 6
  )

  def __init__(self, query=thrift_spec[1][4], title=thrift_spec[2][4], content=thrift_spec[3][4], author_nickname=thrift_spec[4][4], author_username=thrift_spec[5][4], date=thrift_spec[6][4],):
    self.query = query
    self.title = title
    self.content = content
    self.author_nickname = author_nickname
    self.author_username = author_username
    self.date = date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.query = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.author_nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.author_username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.date = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchQuery')
    if self.query != None:
      oprot.writeFieldBegin('query', TType.STRING, 1)
      oprot.writeString(self.query)
      oprot.writeFieldEnd()
    if self.title != None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 3)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.author_nickname != None:
      oprot.writeFieldBegin('author_nickname', TType.STRING, 4)
      oprot.writeString(self.author_nickname)
      oprot.writeFieldEnd()
    if self.author_username != None:
      oprot.writeFieldBegin('author_username', TType.STRING, 5)
      oprot.writeString(self.author_username)
      oprot.writeFieldEnd()
    if self.date != None:
      oprot.writeFieldBegin('date', TType.STRING, 6)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Notice(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
    (3, TType.DOUBLE, 'issued_date', None, None, ), # 3
    (4, TType.DOUBLE, 'due_date', None, None, ), # 4
    (5, TType.BOOL, 'valid', None, None, ), # 5
    (6, TType.I32, 'weight', None, None, ), # 6
  )

  def __init__(self, id=None, content=None, issued_date=None, due_date=None, valid=None, weight=None,):
    self.id = id
    self.content = content
    self.issued_date = issued_date
    self.due_date = due_date
    self.valid = valid
    self.weight = weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.issued_date = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.due_date = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.valid = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Notice')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.issued_date != None:
      oprot.writeFieldBegin('issued_date', TType.DOUBLE, 3)
      oprot.writeDouble(self.issued_date)
      oprot.writeFieldEnd()
    if self.due_date != None:
      oprot.writeFieldBegin('due_date', TType.DOUBLE, 4)
      oprot.writeDouble(self.due_date)
      oprot.writeFieldEnd()
    if self.valid != None:
      oprot.writeFieldBegin('valid', TType.BOOL, 5)
      oprot.writeBool(self.valid)
      oprot.writeFieldEnd()
    if self.weight != None:
      oprot.writeFieldBegin('weight', TType.I32, 6)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WrittenNotice(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'content', None, None, ), # 1
    (2, TType.DOUBLE, 'due_date', None, None, ), # 2
    (3, TType.I32, 'weight', None, None, ), # 3
  )

  def __init__(self, content=None, due_date=None, weight=None,):
    self.content = content
    self.due_date = due_date
    self.weight = weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.due_date = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WrittenNotice')
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 1)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.due_date != None:
      oprot.writeFieldBegin('due_date', TType.DOUBLE, 2)
      oprot.writeDouble(self.due_date)
      oprot.writeFieldEnd()
    if self.weight != None:
      oprot.writeFieldBegin('weight', TType.I32, 3)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

