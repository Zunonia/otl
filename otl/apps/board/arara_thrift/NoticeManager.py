#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def get_banner(self, ):
    pass

  def get_welcome(self, ):
    pass

  def list_banner(self, session_key):
    pass

  def list_welcome(self, session_key):
    pass

  def add_banner(self, session_key, notice_reg_dic):
    pass

  def add_welcome(self, session_key, notice_reg_dic):
    pass

  def remove_banner(self, session_key, id):
    pass

  def remove_welcome(self, session_key, id):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def get_banner(self, ):
    self.send_get_banner()
    return self.recv_get_banner()

  def send_get_banner(self, ):
    self._oprot.writeMessageBegin('get_banner', TMessageType.CALL, self._seqid)
    args = get_banner_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_banner(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_banner_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_banner failed: unknown result");

  def get_welcome(self, ):
    self.send_get_welcome()
    return self.recv_get_welcome()

  def send_get_welcome(self, ):
    self._oprot.writeMessageBegin('get_welcome', TMessageType.CALL, self._seqid)
    args = get_welcome_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_welcome(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_welcome_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_welcome failed: unknown result");

  def list_banner(self, session_key):
    self.send_list_banner(session_key)
    return self.recv_list_banner()

  def send_list_banner(self, session_key):
    self._oprot.writeMessageBegin('list_banner', TMessageType.CALL, self._seqid)
    args = list_banner_args()
    args.session_key = session_key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_list_banner(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = list_banner_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "list_banner failed: unknown result");

  def list_welcome(self, session_key):
    self.send_list_welcome(session_key)
    return self.recv_list_welcome()

  def send_list_welcome(self, session_key):
    self._oprot.writeMessageBegin('list_welcome', TMessageType.CALL, self._seqid)
    args = list_welcome_args()
    args.session_key = session_key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_list_welcome(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = list_welcome_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "list_welcome failed: unknown result");

  def add_banner(self, session_key, notice_reg_dic):
    self.send_add_banner(session_key, notice_reg_dic)
    self.recv_add_banner()

  def send_add_banner(self, session_key, notice_reg_dic):
    self._oprot.writeMessageBegin('add_banner', TMessageType.CALL, self._seqid)
    args = add_banner_args()
    args.session_key = session_key
    args.notice_reg_dic = notice_reg_dic
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_add_banner(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = add_banner_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def add_welcome(self, session_key, notice_reg_dic):
    self.send_add_welcome(session_key, notice_reg_dic)
    self.recv_add_welcome()

  def send_add_welcome(self, session_key, notice_reg_dic):
    self._oprot.writeMessageBegin('add_welcome', TMessageType.CALL, self._seqid)
    args = add_welcome_args()
    args.session_key = session_key
    args.notice_reg_dic = notice_reg_dic
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_add_welcome(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = add_welcome_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def remove_banner(self, session_key, id):
    self.send_remove_banner(session_key, id)
    self.recv_remove_banner()

  def send_remove_banner(self, session_key, id):
    self._oprot.writeMessageBegin('remove_banner', TMessageType.CALL, self._seqid)
    args = remove_banner_args()
    args.session_key = session_key
    args.id = id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_remove_banner(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = remove_banner_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def remove_welcome(self, session_key, id):
    self.send_remove_welcome(session_key, id)
    self.recv_remove_welcome()

  def send_remove_welcome(self, session_key, id):
    self._oprot.writeMessageBegin('remove_welcome', TMessageType.CALL, self._seqid)
    args = remove_welcome_args()
    args.session_key = session_key
    args.id = id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_remove_welcome(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = remove_welcome_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["get_banner"] = Processor.process_get_banner
    self._processMap["get_welcome"] = Processor.process_get_welcome
    self._processMap["list_banner"] = Processor.process_list_banner
    self._processMap["list_welcome"] = Processor.process_list_welcome
    self._processMap["add_banner"] = Processor.process_add_banner
    self._processMap["add_welcome"] = Processor.process_add_welcome
    self._processMap["remove_banner"] = Processor.process_remove_banner
    self._processMap["remove_welcome"] = Processor.process_remove_welcome

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_get_banner(self, seqid, iprot, oprot):
    args = get_banner_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_banner_result()
    try:
      result.success = self._handler.get_banner()
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("get_banner", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_welcome(self, seqid, iprot, oprot):
    args = get_welcome_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_welcome_result()
    try:
      result.success = self._handler.get_welcome()
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("get_welcome", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_list_banner(self, seqid, iprot, oprot):
    args = list_banner_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = list_banner_result()
    try:
      result.success = self._handler.list_banner(args.session_key)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("list_banner", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_list_welcome(self, seqid, iprot, oprot):
    args = list_welcome_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = list_welcome_result()
    try:
      result.success = self._handler.list_welcome(args.session_key)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("list_welcome", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_add_banner(self, seqid, iprot, oprot):
    args = add_banner_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = add_banner_result()
    try:
      self._handler.add_banner(args.session_key, args.notice_reg_dic)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("add_banner", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_add_welcome(self, seqid, iprot, oprot):
    args = add_welcome_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = add_welcome_result()
    try:
      self._handler.add_welcome(args.session_key, args.notice_reg_dic)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("add_welcome", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_remove_banner(self, seqid, iprot, oprot):
    args = remove_banner_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = remove_banner_result()
    try:
      self._handler.remove_banner(args.session_key, args.id)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("remove_banner", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_remove_welcome(self, seqid, iprot, oprot):
    args = remove_welcome_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = remove_welcome_result()
    try:
      self._handler.remove_welcome(args.session_key, args.id)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("remove_welcome", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class get_banner_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_banner_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_banner_result(object):

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_banner_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_welcome_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_welcome_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_welcome_result(object):

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_welcome_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class list_banner_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
  )

  def __init__(self, session_key=None,):
    self.session_key = session_key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('list_banner_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class list_banner_result(object):

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Notice, Notice.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = Notice()
            _elem124.read(iprot)
            self.success.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('list_banner_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter125 in self.success:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class list_welcome_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
  )

  def __init__(self, session_key=None,):
    self.session_key = session_key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('list_welcome_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class list_welcome_result(object):

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Notice, Notice.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype129, _size126) = iprot.readListBegin()
          for _i130 in xrange(_size126):
            _elem131 = Notice()
            _elem131.read(iprot)
            self.success.append(_elem131)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('list_welcome_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter132 in self.success:
        iter132.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_banner_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRUCT, 'notice_reg_dic', (WrittenNotice, WrittenNotice.thrift_spec), None, ), # 2
  )

  def __init__(self, session_key=None, notice_reg_dic=None,):
    self.session_key = session_key
    self.notice_reg_dic = notice_reg_dic

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.notice_reg_dic = WrittenNotice()
          self.notice_reg_dic.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_banner_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.notice_reg_dic != None:
      oprot.writeFieldBegin('notice_reg_dic', TType.STRUCT, 2)
      self.notice_reg_dic.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_banner_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_banner_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_welcome_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRUCT, 'notice_reg_dic', (WrittenNotice, WrittenNotice.thrift_spec), None, ), # 2
  )

  def __init__(self, session_key=None, notice_reg_dic=None,):
    self.session_key = session_key
    self.notice_reg_dic = notice_reg_dic

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.notice_reg_dic = WrittenNotice()
          self.notice_reg_dic.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_welcome_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.notice_reg_dic != None:
      oprot.writeFieldBegin('notice_reg_dic', TType.STRUCT, 2)
      self.notice_reg_dic.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_welcome_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_welcome_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class remove_banner_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.I32, 'id', None, None, ), # 2
  )

  def __init__(self, session_key=None, id=None,):
    self.session_key = session_key
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('remove_banner_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 2)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class remove_banner_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('remove_banner_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class remove_welcome_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.I32, 'id', None, None, ), # 2
  )

  def __init__(self, session_key=None, id=None,):
    self.session_key = session_key
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('remove_welcome_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 2)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class remove_welcome_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('remove_welcome_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


