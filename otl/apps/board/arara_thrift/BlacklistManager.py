#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def add(self, session_key, username, block_article, block_message):
    pass

  def delete_(self, session_key, username):
    pass

  def modify(self, session_key, blacklist_info):
    pass

  def list_(self, session_key):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def add(self, session_key, username, block_article, block_message):
    self.send_add(session_key, username, block_article, block_message)
    self.recv_add()

  def send_add(self, session_key, username, block_article, block_message):
    self._oprot.writeMessageBegin('add', TMessageType.CALL, self._seqid)
    args = add_args()
    args.session_key = session_key
    args.username = username
    args.block_article = block_article
    args.block_message = block_message
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_add(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = add_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def delete_(self, session_key, username):
    self.send_delete_(session_key, username)
    self.recv_delete_()

  def send_delete_(self, session_key, username):
    self._oprot.writeMessageBegin('delete_', TMessageType.CALL, self._seqid)
    args = delete__args()
    args.session_key = session_key
    args.username = username
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_delete_(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = delete__result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def modify(self, session_key, blacklist_info):
    self.send_modify(session_key, blacklist_info)
    self.recv_modify()

  def send_modify(self, session_key, blacklist_info):
    self._oprot.writeMessageBegin('modify', TMessageType.CALL, self._seqid)
    args = modify_args()
    args.session_key = session_key
    args.blacklist_info = blacklist_info
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_modify(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = modify_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def list_(self, session_key):
    self.send_list_(session_key)
    return self.recv_list_()

  def send_list_(self, session_key):
    self._oprot.writeMessageBegin('list_', TMessageType.CALL, self._seqid)
    args = list__args()
    args.session_key = session_key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_list_(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = list__result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "list_ failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["add"] = Processor.process_add
    self._processMap["delete_"] = Processor.process_delete_
    self._processMap["modify"] = Processor.process_modify
    self._processMap["list_"] = Processor.process_list_

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_add(self, seqid, iprot, oprot):
    args = add_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = add_result()
    try:
      self._handler.add(args.session_key, args.username, args.block_article, args.block_message)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("add", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_delete_(self, seqid, iprot, oprot):
    args = delete__args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = delete__result()
    try:
      self._handler.delete_(args.session_key, args.username)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("delete_", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_modify(self, seqid, iprot, oprot):
    args = modify_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = modify_result()
    try:
      self._handler.modify(args.session_key, args.blacklist_info)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("modify", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_list_(self, seqid, iprot, oprot):
    args = list__args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = list__result()
    try:
      result.success = self._handler.list_(args.session_key)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("list_", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class add_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRING, 'username', None, None, ), # 2
    (3, TType.BOOL, 'block_article', None, True, ), # 3
    (4, TType.BOOL, 'block_message', None, True, ), # 4
  )

  def __init__(self, session_key=None, username=None, block_article=thrift_spec[3][4], block_message=thrift_spec[4][4],):
    self.session_key = session_key
    self.username = username
    self.block_article = block_article
    self.block_message = block_message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.block_article = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.block_message = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 2)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.block_article != None:
      oprot.writeFieldBegin('block_article', TType.BOOL, 3)
      oprot.writeBool(self.block_article)
      oprot.writeFieldEnd()
    if self.block_message != None:
      oprot.writeFieldBegin('block_message', TType.BOOL, 4)
      oprot.writeBool(self.block_message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class delete__args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRING, 'username', None, None, ), # 2
  )

  def __init__(self, session_key=None, username=None,):
    self.session_key = session_key
    self.username = username

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('delete__args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 2)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class delete__result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('delete__result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modify_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.STRUCT, 'blacklist_info', (BlacklistRequest, BlacklistRequest.thrift_spec), None, ), # 2
  )

  def __init__(self, session_key=None, blacklist_info=None,):
    self.session_key = session_key
    self.blacklist_info = blacklist_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.blacklist_info = BlacklistRequest()
          self.blacklist_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modify_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.blacklist_info != None:
      oprot.writeFieldBegin('blacklist_info', TType.STRUCT, 2)
      self.blacklist_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modify_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modify_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class list__args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
  )

  def __init__(self, session_key=None,):
    self.session_key = session_key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('list__args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class list__result(object):

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(BlacklistInformation, BlacklistInformation.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = BlacklistInformation()
            _elem54.read(iprot)
            self.success.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('list__result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter55 in self.success:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


