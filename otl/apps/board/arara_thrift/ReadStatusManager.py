#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def check_stat(self, session_key, no):
    pass

  def check_stats(self, session_key, no_list):
    pass

  def mark_as_read_list(self, session_key, no_list):
    pass

  def mark_as_read(self, session_key, no):
    pass

  def mark_as_viewed(self, session_key, no):
    pass

  def save_to_database(self, username):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def check_stat(self, session_key, no):
    self.send_check_stat(session_key, no)
    return self.recv_check_stat()

  def send_check_stat(self, session_key, no):
    self._oprot.writeMessageBegin('check_stat', TMessageType.CALL, self._seqid)
    args = check_stat_args()
    args.session_key = session_key
    args.no = no
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_check_stat(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = check_stat_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "check_stat failed: unknown result");

  def check_stats(self, session_key, no_list):
    self.send_check_stats(session_key, no_list)
    return self.recv_check_stats()

  def send_check_stats(self, session_key, no_list):
    self._oprot.writeMessageBegin('check_stats', TMessageType.CALL, self._seqid)
    args = check_stats_args()
    args.session_key = session_key
    args.no_list = no_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_check_stats(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = check_stats_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    raise TApplicationException(TApplicationException.MISSING_RESULT, "check_stats failed: unknown result");

  def mark_as_read_list(self, session_key, no_list):
    self.send_mark_as_read_list(session_key, no_list)
    self.recv_mark_as_read_list()

  def send_mark_as_read_list(self, session_key, no_list):
    self._oprot.writeMessageBegin('mark_as_read_list', TMessageType.CALL, self._seqid)
    args = mark_as_read_list_args()
    args.session_key = session_key
    args.no_list = no_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mark_as_read_list(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = mark_as_read_list_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def mark_as_read(self, session_key, no):
    self.send_mark_as_read(session_key, no)
    self.recv_mark_as_read()

  def send_mark_as_read(self, session_key, no):
    self._oprot.writeMessageBegin('mark_as_read', TMessageType.CALL, self._seqid)
    args = mark_as_read_args()
    args.session_key = session_key
    args.no = no
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mark_as_read(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = mark_as_read_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def mark_as_viewed(self, session_key, no):
    self.send_mark_as_viewed(session_key, no)
    self.recv_mark_as_viewed()

  def send_mark_as_viewed(self, session_key, no):
    self._oprot.writeMessageBegin('mark_as_viewed', TMessageType.CALL, self._seqid)
    args = mark_as_viewed_args()
    args.session_key = session_key
    args.no = no
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mark_as_viewed(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = mark_as_viewed_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return

  def save_to_database(self, username):
    self.send_save_to_database(username)
    self.recv_save_to_database()

  def send_save_to_database(self, username):
    self._oprot.writeMessageBegin('save_to_database', TMessageType.CALL, self._seqid)
    args = save_to_database_args()
    args.username = username
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_save_to_database(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = save_to_database_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.invalid != None:
      raise result.invalid
    if result.ouch != None:
      raise result.ouch
    if result.not_logged_in != None:
      raise result.not_logged_in
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["check_stat"] = Processor.process_check_stat
    self._processMap["check_stats"] = Processor.process_check_stats
    self._processMap["mark_as_read_list"] = Processor.process_mark_as_read_list
    self._processMap["mark_as_read"] = Processor.process_mark_as_read
    self._processMap["mark_as_viewed"] = Processor.process_mark_as_viewed
    self._processMap["save_to_database"] = Processor.process_save_to_database

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_check_stat(self, seqid, iprot, oprot):
    args = check_stat_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = check_stat_result()
    try:
      result.success = self._handler.check_stat(args.session_key, args.no)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("check_stat", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_check_stats(self, seqid, iprot, oprot):
    args = check_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = check_stats_result()
    try:
      result.success = self._handler.check_stats(args.session_key, args.no_list)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("check_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mark_as_read_list(self, seqid, iprot, oprot):
    args = mark_as_read_list_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mark_as_read_list_result()
    try:
      self._handler.mark_as_read_list(args.session_key, args.no_list)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("mark_as_read_list", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mark_as_read(self, seqid, iprot, oprot):
    args = mark_as_read_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mark_as_read_result()
    try:
      self._handler.mark_as_read(args.session_key, args.no)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("mark_as_read", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mark_as_viewed(self, seqid, iprot, oprot):
    args = mark_as_viewed_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mark_as_viewed_result()
    try:
      self._handler.mark_as_viewed(args.session_key, args.no)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("mark_as_viewed", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_save_to_database(self, seqid, iprot, oprot):
    args = save_to_database_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = save_to_database_result()
    try:
      self._handler.save_to_database(args.username)
    except InvalidOperation, invalid:
      result.invalid = invalid
    except InternalError, ouch:
      result.ouch = ouch
    except NotLoggedIn, not_logged_in:
      result.not_logged_in = not_logged_in
    oprot.writeMessageBegin("save_to_database", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class check_stat_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.I32, 'no', None, None, ), # 2
  )

  def __init__(self, session_key=None, no=None,):
    self.session_key = session_key
    self.no = no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.no = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_stat_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.no != None:
      oprot.writeFieldBegin('no', TType.I32, 2)
      oprot.writeI32(self.no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class check_stat_result(object):

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_stat_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class check_stats_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.LIST, 'no_list', (TType.I32,None), None, ), # 2
  )

  def __init__(self, session_key=None, no_list=None,):
    self.session_key = session_key
    self.no_list = no_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.no_list = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readI32();
            self.no_list.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_stats_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.no_list != None:
      oprot.writeFieldBegin('no_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.no_list))
      for iter69 in self.no_list:
        oprot.writeI32(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class check_stats_result(object):

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, invalid=None, ouch=None, not_logged_in=None,):
    self.success = success
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = iprot.readString();
            self.success.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_stats_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter76 in self.success:
        oprot.writeString(iter76)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mark_as_read_list_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.LIST, 'no_list', (TType.I32,None), None, ), # 2
  )

  def __init__(self, session_key=None, no_list=None,):
    self.session_key = session_key
    self.no_list = no_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.no_list = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = iprot.readI32();
            self.no_list.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mark_as_read_list_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.no_list != None:
      oprot.writeFieldBegin('no_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.no_list))
      for iter83 in self.no_list:
        oprot.writeI32(iter83)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mark_as_read_list_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mark_as_read_list_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mark_as_read_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.I32, 'no', None, None, ), # 2
  )

  def __init__(self, session_key=None, no=None,):
    self.session_key = session_key
    self.no = no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.no = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mark_as_read_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.no != None:
      oprot.writeFieldBegin('no', TType.I32, 2)
      oprot.writeI32(self.no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mark_as_read_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mark_as_read_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mark_as_viewed_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_key', None, None, ), # 1
    (2, TType.I32, 'no', None, None, ), # 2
  )

  def __init__(self, session_key=None, no=None,):
    self.session_key = session_key
    self.no = no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.no = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mark_as_viewed_args')
    if self.session_key != None:
      oprot.writeFieldBegin('session_key', TType.STRING, 1)
      oprot.writeString(self.session_key)
      oprot.writeFieldEnd()
    if self.no != None:
      oprot.writeFieldBegin('no', TType.I32, 2)
      oprot.writeI32(self.no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mark_as_viewed_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mark_as_viewed_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class save_to_database_args(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, '', ), # 1
  )

  def __init__(self, username=thrift_spec[1][4],):
    self.username = username

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('save_to_database_args')
    if self.username != None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class save_to_database_result(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ouch', (InternalError, InternalError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'not_logged_in', (NotLoggedIn, NotLoggedIn.thrift_spec), None, ), # 3
  )

  def __init__(self, invalid=None, ouch=None, not_logged_in=None,):
    self.invalid = invalid
    self.ouch = ouch
    self.not_logged_in = not_logged_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.invalid = InvalidOperation()
          self.invalid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ouch = InternalError()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.not_logged_in = NotLoggedIn()
          self.not_logged_in.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('save_to_database_result')
    if self.invalid != None:
      oprot.writeFieldBegin('invalid', TType.STRUCT, 1)
      self.invalid.write(oprot)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 2)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    if self.not_logged_in != None:
      oprot.writeFieldBegin('not_logged_in', TType.STRUCT, 3)
      self.not_logged_in.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


