# -*- coding: utf-8
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.core.paginator import Paginator
from django.conf import settings
from django.contrib.auth.models import User
from django.http import HttpResponseRedirect
from django.contrib.auth.decorators import login_required
from django.db.models import Q
from otl.apps.favorites.models import CourseLink
from otl.apps.common import *
from otl.utils.decorators import login_required_ajax
from otl.apps.accounts.models import Department
from otl.apps.timetable.models import Lecture
from otl.apps.dictionary.models import *

def index(request):
    pass

def department(request, department_code):
    dept = Department.objects.get(code=department_code)
    lectures_from_dept = Lecture.objects.filter(department__code__exact=department_code)    
    print lectures_from_dept
    return render_to_response('dictionary/department.html', {
	'section' : 'dictionary',
	'title' : u'과목 사전',
	'dept' : dept,
	'lectures_from_dept' : lectures_from_dept }, context_instance=RequestContext(request))

def search(request):
    pass

def view(request, course_code):
    course = Course.objects.get(code=course_code)
    return render_to_response('dictionary/view.html', {
	    'section' : 'dictionary',
    	'title' : u'과목 사전',
    	'course' : course,
    }, context_instance=RequestContext(request))

@login_required
def add_comment(request, course_code, lecture_code):
    new_course = Course.objects.get(code=course_code)
    new_lecture = Course.objects.get(code=lecture_code)
    new_comment = request.GET('comment').strip()

    if request.GET('load') == 'True':
        new_load = True
    elif request.GET('load') == 'False':
        new_load = False
    else
        new_load = None

    if request.GET('score') == 'True':
        new_score = True
    elif request.GET('score') == 'False':
        new_score = False
    else:
        new_score = None

    if request.GET('gain') == 'True':
        new_gain = True
    elif request.GET('gain') == 'False':
        new_gain = False
    else:
        new_gain = None

    comment = CourseComment.objects.create(\
        writer = request.user,\
        course = new_course,\
        lecture = new_lecture,\
        comment = new_comment,\
        load = new_load\
        score = new_scroe,\
        gain = new_gain\
    )
    comment.save()
    return HttpResponseRedirect('/dictionary/view/' + course_code)

@login_required
def delete_comment(request, comment_id):
    pass



